{
  "abi": [
    {
      "inputs": [],
      "name": "getDONPublicKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getThresholdPublicKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "donPublicKey",
          "type": "bytes"
        }
      ],
      "name": "setDONPublicKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "thresholdPublicKey",
          "type": "bytes"
        }
      ],
      "name": "setThresholdPublicKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "flags",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "requestingContract",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "availableBalance",
              "type": "uint96"
            },
            {
              "internalType": "uint72",
              "name": "adminFee",
              "type": "uint72"
            },
            {
              "internalType": "uint64",
              "name": "subscriptionId",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "initiatedRequests",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "callbackGasLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint16",
              "name": "dataVersion",
              "type": "uint16"
            },
            {
              "internalType": "uint64",
              "name": "completedRequests",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "subscriptionOwner",
              "type": "address"
            }
          ],
          "internalType": "struct FunctionsResponse.RequestMeta",
          "name": "request",
          "type": "tuple"
        }
      ],
      "name": "startRequest",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "requestId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "coordinator",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "estimatedTotalCostJuels",
              "type": "uint96"
            },
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "subscriptionId",
              "type": "uint64"
            },
            {
              "internalType": "uint32",
              "name": "callbackGasLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint72",
              "name": "adminFee",
              "type": "uint72"
            },
            {
              "internalType": "uint72",
              "name": "donFee",
              "type": "uint72"
            },
            {
              "internalType": "uint40",
              "name": "gasOverheadBeforeCallback",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "gasOverheadAfterCallback",
              "type": "uint40"
            },
            {
              "internalType": "uint32",
              "name": "timeoutTimestamp",
              "type": "uint32"
            }
          ],
          "internalType": "struct FunctionsResponse.Commitment",
          "name": "commitment",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "getDONPublicKey()": "d328a91e",
    "getThresholdPublicKey()": "81f1b938",
    "setDONPublicKey(bytes)": "7f15e166",
    "setThresholdPublicKey(bytes)": "083a5466",
    "startRequest((bytes,bytes32,address,uint96,uint72,uint64,uint64,uint32,uint16,uint64,address))": "a631571e"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getDONPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getThresholdPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"donPublicKey\",\"type\":\"bytes\"}],\"name\":\"setDONPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"thresholdPublicKey\",\"type\":\"bytes\"}],\"name\":\"setThresholdPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"flags\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"requestingContract\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"availableBalance\",\"type\":\"uint96\"},{\"internalType\":\"uint72\",\"name\":\"adminFee\",\"type\":\"uint72\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"initiatedRequests\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"dataVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"completedRequests\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"subscriptionOwner\",\"type\":\"address\"}],\"internalType\":\"struct FunctionsResponse.RequestMeta\",\"name\":\"request\",\"type\":\"tuple\"}],\"name\":\"startRequest\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"coordinator\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"estimatedTotalCostJuels\",\"type\":\"uint96\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint72\",\"name\":\"adminFee\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"donFee\",\"type\":\"uint72\"},{\"internalType\":\"uint40\",\"name\":\"gasOverheadBeforeCallback\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"gasOverheadAfterCallback\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"timeoutTimestamp\",\"type\":\"uint32\"}],\"internalType\":\"struct FunctionsResponse.Commitment\",\"name\":\"commitment\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getDONPublicKey()\":{\"details\":\"All nodes on the DON have the corresponding private key needed to decrypt the secrets encrypted with the public key\",\"returns\":{\"_0\":\"publicKey the DON's public key\"}},\"getThresholdPublicKey()\":{\"details\":\"All nodes on the DON have separate key shares of the threshold decryption key and nodes must participate in a threshold decryption OCR round to decrypt secrets\",\"returns\":{\"_0\":\"thresholdPublicKey the DON's threshold encryption public key\"}},\"setDONPublicKey(bytes)\":{\"details\":\"Used to rotate the key\",\"params\":{\"donPublicKey\":\"The new public key\"}},\"setThresholdPublicKey(bytes)\":{\"details\":\"Used to rotate the key\",\"params\":{\"thresholdPublicKey\":\"The new public key\"}},\"startRequest((bytes,bytes32,address,uint96,uint72,uint64,uint64,uint32,uint16,uint64,address))\":{\"details\":\"see the struct for field descriptions\",\"params\":{\"request\":\"The request metadata\"},\"returns\":{\"commitment\":\"- The parameters of the request that must be held consistent at response time\"}}},\"title\":\"Chainlink Functions DON Coordinator interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getDONPublicKey()\":{\"notice\":\"Returns the DON's secp256k1 public key that is used to encrypt secrets\"},\"getThresholdPublicKey()\":{\"notice\":\"Returns the DON's threshold encryption public key used to encrypt secrets\"},\"setDONPublicKey(bytes)\":{\"notice\":\"Sets DON's secp256k1 public key used to encrypt secrets\"},\"setThresholdPublicKey(bytes)\":{\"notice\":\"Sets the DON's threshold encryption public key used to encrypt secrets\"},\"startRequest((bytes,bytes32,address,uint96,uint72,uint64,uint64,uint32,uint16,uint64,address))\":{\"notice\":\"Receives a request to be emitted to the DON for processing\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsCoordinator.sol\":\"IFunctionsCoordinator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":@ERC3643/=lib/ERC-3643/contracts/\",\":@chainlink/contracts-ccip/=src/v0.8/\",\":@chainlink/contracts/=node_modules/@chainlink/contracts/src/v0.6/\",\":@erc721a/=lib/ERC721A/contracts/\",\":@onchain-id/solidity/contracts/=lib/solidity/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@prb/test/=lib/prb-test/src/\",\":ERC-3643/=lib/ERC-3643/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/contracts-upgradleable/=lib/openzeppelin-contracts-upgradleable/contracts/\",\":prb-test/=lib/prb-test/src/\",\":solidity/=lib/solidity/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsCoordinator.sol\":{\"keccak256\":\"0x5e4f7c68b61190c2e32d50d03eeba942ab9beda14bcacddfcd7cba558dd62f8f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c0d10bce704a1b3586692807f3ae6f0c9854c11e9f1c6f68832ddb555e0057ee\",\"dweb:/ipfs/QmUFusvF7B5qGodpVdD2BRHXYvLDNjzLn3E359Vx6AxRUB\"]},\"src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol\":{\"keccak256\":\"0xab83613f1bb1cbdbf15fdbb6382259e2b2678bfe5a3a6dab976cdf2337f1f94e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0775cd55699e89e5f3df452de2c2273e00e51d79feb2b0c2d36e856cfeb1bd4b\",\"dweb:/ipfs/QmQDoC1hJhYYEg8SZouhkZ5BgC7mhqn4Ymgo5tvV3iYUgg\"]},\"src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol\":{\"keccak256\":\"0x219b5272fd44aeade22130bb9b57b748950febb2f406d5e813ddaa14cd98147c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a7b1d4d5fd839fb620c7f230a7d9d957bba6efbdec6964362c6603211b902ccc\",\"dweb:/ipfs/QmXAAGcbJP4GSpjBqc9Z8KA5wwdv6Q2FsYZt1LP2GM5AJT\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.21+commit.d9974bed"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDONPublicKey",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getThresholdPublicKey",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "donPublicKey",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDONPublicKey"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "thresholdPublicKey",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setThresholdPublicKey"
        },
        {
          "inputs": [
            {
              "internalType": "struct FunctionsResponse.RequestMeta",
              "name": "request",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes32",
                  "name": "flags",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "requestingContract",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "availableBalance",
                  "type": "uint96"
                },
                {
                  "internalType": "uint72",
                  "name": "adminFee",
                  "type": "uint72"
                },
                {
                  "internalType": "uint64",
                  "name": "subscriptionId",
                  "type": "uint64"
                },
                {
                  "internalType": "uint64",
                  "name": "initiatedRequests",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "callbackGasLimit",
                  "type": "uint32"
                },
                {
                  "internalType": "uint16",
                  "name": "dataVersion",
                  "type": "uint16"
                },
                {
                  "internalType": "uint64",
                  "name": "completedRequests",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "subscriptionOwner",
                  "type": "address"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "startRequest",
          "outputs": [
            {
              "internalType": "struct FunctionsResponse.Commitment",
              "name": "commitment",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "requestId",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "coordinator",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "estimatedTotalCostJuels",
                  "type": "uint96"
                },
                {
                  "internalType": "address",
                  "name": "client",
                  "type": "address"
                },
                {
                  "internalType": "uint64",
                  "name": "subscriptionId",
                  "type": "uint64"
                },
                {
                  "internalType": "uint32",
                  "name": "callbackGasLimit",
                  "type": "uint32"
                },
                {
                  "internalType": "uint72",
                  "name": "adminFee",
                  "type": "uint72"
                },
                {
                  "internalType": "uint72",
                  "name": "donFee",
                  "type": "uint72"
                },
                {
                  "internalType": "uint40",
                  "name": "gasOverheadBeforeCallback",
                  "type": "uint40"
                },
                {
                  "internalType": "uint40",
                  "name": "gasOverheadAfterCallback",
                  "type": "uint40"
                },
                {
                  "internalType": "uint32",
                  "name": "timeoutTimestamp",
                  "type": "uint32"
                }
              ]
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "getDONPublicKey()": {
            "details": "All nodes on the DON have the corresponding private key needed to decrypt the secrets encrypted with the public key",
            "returns": {
              "_0": "publicKey the DON's public key"
            }
          },
          "getThresholdPublicKey()": {
            "details": "All nodes on the DON have separate key shares of the threshold decryption key and nodes must participate in a threshold decryption OCR round to decrypt secrets",
            "returns": {
              "_0": "thresholdPublicKey the DON's threshold encryption public key"
            }
          },
          "setDONPublicKey(bytes)": {
            "details": "Used to rotate the key",
            "params": {
              "donPublicKey": "The new public key"
            }
          },
          "setThresholdPublicKey(bytes)": {
            "details": "Used to rotate the key",
            "params": {
              "thresholdPublicKey": "The new public key"
            }
          },
          "startRequest((bytes,bytes32,address,uint96,uint72,uint64,uint64,uint32,uint16,uint64,address))": {
            "details": "see the struct for field descriptions",
            "params": {
              "request": "The request metadata"
            },
            "returns": {
              "commitment": "- The parameters of the request that must be held consistent at response time"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "getDONPublicKey()": {
            "notice": "Returns the DON's secp256k1 public key that is used to encrypt secrets"
          },
          "getThresholdPublicKey()": {
            "notice": "Returns the DON's threshold encryption public key used to encrypt secrets"
          },
          "setDONPublicKey(bytes)": {
            "notice": "Sets DON's secp256k1 public key used to encrypt secrets"
          },
          "setThresholdPublicKey(bytes)": {
            "notice": "Sets the DON's threshold encryption public key used to encrypt secrets"
          },
          "startRequest((bytes,bytes32,address,uint96,uint72,uint64,uint64,uint32,uint16,uint64,address))": {
            "notice": "Receives a request to be emitted to the DON for processing"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@ERC3643/=lib/ERC-3643/contracts/",
        "@chainlink/contracts-ccip/=src/v0.8/",
        "@chainlink/contracts/=node_modules/@chainlink/contracts/src/v0.6/",
        "@erc721a/=lib/ERC721A/contracts/",
        "@onchain-id/solidity/contracts/=lib/solidity/contracts/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@prb/test/=lib/prb-test/src/",
        "ERC-3643/=lib/ERC-3643/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/contracts/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/contracts-upgradleable/=lib/openzeppelin-contracts-upgradleable/contracts/",
        "prb-test/=lib/prb-test/src/",
        "solidity/=lib/solidity/contracts/",
        "solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 10000
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsCoordinator.sol": "IFunctionsCoordinator"
      },
      "libraries": {}
    },
    "sources": {
      "src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsCoordinator.sol": {
        "keccak256": "0x5e4f7c68b61190c2e32d50d03eeba942ab9beda14bcacddfcd7cba558dd62f8f",
        "urls": [
          "bzz-raw://c0d10bce704a1b3586692807f3ae6f0c9854c11e9f1c6f68832ddb555e0057ee",
          "dweb:/ipfs/QmUFusvF7B5qGodpVdD2BRHXYvLDNjzLn3E359Vx6AxRUB"
        ],
        "license": "MIT"
      },
      "src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol": {
        "keccak256": "0xab83613f1bb1cbdbf15fdbb6382259e2b2678bfe5a3a6dab976cdf2337f1f94e",
        "urls": [
          "bzz-raw://0775cd55699e89e5f3df452de2c2273e00e51d79feb2b0c2d36e856cfeb1bd4b",
          "dweb:/ipfs/QmQDoC1hJhYYEg8SZouhkZ5BgC7mhqn4Ymgo5tvV3iYUgg"
        ],
        "license": "MIT"
      },
      "src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol": {
        "keccak256": "0x219b5272fd44aeade22130bb9b57b748950febb2f406d5e813ddaa14cd98147c",
        "urls": [
          "bzz-raw://a7b1d4d5fd839fb620c7f230a7d9d957bba6efbdec6964362c6603211b902ccc",
          "dweb:/ipfs/QmXAAGcbJP4GSpjBqc9Z8KA5wwdv6Q2FsYZt1LP2GM5AJT"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsCoordinator.sol",
    "id": 91917,
    "exportedSymbols": {
      "FunctionsResponse": [
        92760
      ],
      "IFunctionsCoordinator": [
        91916
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:1815:166",
    "nodes": [
      {
        "id": 91878,
        "nodeType": "PragmaDirective",
        "src": "32:24:166",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".19"
        ]
      },
      {
        "id": 91880,
        "nodeType": "ImportDirective",
        "src": "58:69:166",
        "nodes": [],
        "absolutePath": "src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol",
        "file": "../libraries/FunctionsResponse.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 91917,
        "sourceUnit": 92761,
        "symbolAliases": [
          {
            "foreign": {
              "id": 91879,
              "name": "FunctionsResponse",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 92760,
              "src": "66:17:166",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 91916,
        "nodeType": "ContractDefinition",
        "src": "187:1659:166",
        "nodes": [
          {
            "id": 91887,
            "nodeType": "FunctionDefinition",
            "src": "563:70:166",
            "nodes": [],
            "documentation": {
              "id": 91882,
              "nodeType": "StructuredDocumentation",
              "src": "223:337:166",
              "text": "@notice Returns the DON's threshold encryption public key used to encrypt secrets\n @dev All nodes on the DON have separate key shares of the threshold decryption key\n and nodes must participate in a threshold decryption OCR round to decrypt secrets\n @return thresholdPublicKey the DON's threshold encryption public key"
            },
            "functionSelector": "81f1b938",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getThresholdPublicKey",
            "nameLocation": "572:21:166",
            "parameters": {
              "id": 91883,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "593:2:166"
            },
            "returnParameters": {
              "id": 91886,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 91885,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 91887,
                  "src": "619:12:166",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 91884,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "619:5:166",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "618:14:166"
            },
            "scope": 91916,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 91893,
            "nodeType": "FunctionDefinition",
            "src": "807:75:166",
            "nodes": [],
            "documentation": {
              "id": 91888,
              "nodeType": "StructuredDocumentation",
              "src": "637:167:166",
              "text": "@notice Sets the DON's threshold encryption public key used to encrypt secrets\n @dev Used to rotate the key\n @param thresholdPublicKey The new public key"
            },
            "functionSelector": "083a5466",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setThresholdPublicKey",
            "nameLocation": "816:21:166",
            "parameters": {
              "id": 91891,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 91890,
                  "mutability": "mutable",
                  "name": "thresholdPublicKey",
                  "nameLocation": "853:18:166",
                  "nodeType": "VariableDeclaration",
                  "scope": 91893,
                  "src": "838:33:166",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 91889,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "838:5:166",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "837:35:166"
            },
            "returnParameters": {
              "id": 91892,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "881:0:166"
            },
            "scope": 91916,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 91899,
            "nodeType": "FunctionDefinition",
            "src": "1149:64:166",
            "nodes": [],
            "documentation": {
              "id": 91894,
              "nodeType": "StructuredDocumentation",
              "src": "886:260:166",
              "text": "@notice Returns the DON's secp256k1 public key that is used to encrypt secrets\n @dev All nodes on the DON have the corresponding private key\n needed to decrypt the secrets encrypted with the public key\n @return publicKey the DON's public key"
            },
            "functionSelector": "d328a91e",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getDONPublicKey",
            "nameLocation": "1158:15:166",
            "parameters": {
              "id": 91895,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1173:2:166"
            },
            "returnParameters": {
              "id": 91898,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 91897,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 91899,
                  "src": "1199:12:166",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 91896,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1199:5:166",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1198:14:166"
            },
            "scope": 91916,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 91905,
            "nodeType": "FunctionDefinition",
            "src": "1366:63:166",
            "nodes": [],
            "documentation": {
              "id": 91900,
              "nodeType": "StructuredDocumentation",
              "src": "1217:146:166",
              "text": "@notice Sets DON's secp256k1 public key used to encrypt secrets\n @dev Used to rotate the key\n @param donPublicKey The new public key"
            },
            "functionSelector": "7f15e166",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setDONPublicKey",
            "nameLocation": "1375:15:166",
            "parameters": {
              "id": 91903,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 91902,
                  "mutability": "mutable",
                  "name": "donPublicKey",
                  "nameLocation": "1406:12:166",
                  "nodeType": "VariableDeclaration",
                  "scope": 91905,
                  "src": "1391:27:166",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 91901,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1391:5:166",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1390:29:166"
            },
            "returnParameters": {
              "id": 91904,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1428:0:166"
            },
            "scope": 91916,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 91915,
            "nodeType": "FunctionDefinition",
            "src": "1700:144:166",
            "nodes": [],
            "documentation": {
              "id": 91906,
              "nodeType": "StructuredDocumentation",
              "src": "1433:264:166",
              "text": "@notice Receives a request to be emitted to the DON for processing\n @param request The request metadata\n @dev see the struct for field descriptions\n @return commitment - The parameters of the request that must be held consistent at response time"
            },
            "functionSelector": "a631571e",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "startRequest",
            "nameLocation": "1709:12:166",
            "parameters": {
              "id": 91910,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 91909,
                  "mutability": "mutable",
                  "name": "request",
                  "nameLocation": "1766:7:166",
                  "nodeType": "VariableDeclaration",
                  "scope": 91915,
                  "src": "1727:46:166",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_RequestMeta_$92728_calldata_ptr",
                    "typeString": "struct FunctionsResponse.RequestMeta"
                  },
                  "typeName": {
                    "id": 91908,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 91907,
                      "name": "FunctionsResponse.RequestMeta",
                      "nameLocations": [
                        "1727:17:166",
                        "1745:11:166"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 92728,
                      "src": "1727:29:166"
                    },
                    "referencedDeclaration": 92728,
                    "src": "1727:29:166",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_RequestMeta_$92728_storage_ptr",
                      "typeString": "struct FunctionsResponse.RequestMeta"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1721:56:166"
            },
            "returnParameters": {
              "id": 91914,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 91913,
                  "mutability": "mutable",
                  "name": "commitment",
                  "nameLocation": "1832:10:166",
                  "nodeType": "VariableDeclaration",
                  "scope": 91915,
                  "src": "1796:46:166",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_Commitment_$92759_memory_ptr",
                    "typeString": "struct FunctionsResponse.Commitment"
                  },
                  "typeName": {
                    "id": 91912,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 91911,
                      "name": "FunctionsResponse.Commitment",
                      "nameLocations": [
                        "1796:17:166",
                        "1814:10:166"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 92759,
                      "src": "1796:28:166"
                    },
                    "referencedDeclaration": 92759,
                    "src": "1796:28:166",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Commitment_$92759_storage_ptr",
                      "typeString": "struct FunctionsResponse.Commitment"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1795:48:166"
            },
            "scope": 91916,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IFunctionsCoordinator",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 91881,
          "nodeType": "StructuredDocumentation",
          "src": "129:58:166",
          "text": "@title Chainlink Functions DON Coordinator interface."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          91916
        ],
        "name": "IFunctionsCoordinator",
        "nameLocation": "197:21:166",
        "scope": 91917,
        "usedErrors": [],
        "usedEvents": []
      }
    ],
    "license": "MIT"
  },
  "id": 166
}