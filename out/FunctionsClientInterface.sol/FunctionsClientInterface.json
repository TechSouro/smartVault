{
  "abi": [
    {
      "inputs": [],
      "name": "getDONPublicKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "getDONPublicKey()": "d328a91e",
    "handleOracleFulfillment(bytes32,bytes,bytes)": "0ca76175"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"getDONPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getDONPublicKey()\":{\"details\":\"All Oracles nodes have the corresponding private key needed to decrypt the secrets encrypted with the public key\",\"returns\":{\"_0\":\"publicKey DON's public key\"}},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"params\":{\"err\":\"Aggregated error either from the user code or from the execution pipeline. Either response or error parameter will be set, but never both.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the user code.\"}}},\"title\":\"Chainlink Functions client interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getDONPublicKey()\":{\"notice\":\"Returns the DON's secp256k1 public key used to encrypt secrets\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the designated transmitter node in an OCR round.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.8/functions/tests/v0_0_0/testhelpers/mocks/FunctionsClientInterface.sol\":\"FunctionsClientInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":@ERC3643/=lib/ERC-3643/contracts/\",\":@chainlink/contracts-ccip/=src/v0.8/\",\":@chainlink/contracts/=node_modules/@chainlink/contracts/src/v0.6/\",\":@erc721a/=lib/ERC721A/contracts/\",\":@onchain-id/solidity/contracts/=lib/solidity/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@prb/test/=lib/prb-test/src/\",\":ERC-3643/=lib/ERC-3643/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/contracts-upgradleable/=lib/openzeppelin-contracts-upgradleable/contracts/\",\":prb-test/=lib/prb-test/src/\",\":solidity/=lib/solidity/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"src/v0.8/functions/tests/v0_0_0/testhelpers/mocks/FunctionsClientInterface.sol\":{\"keccak256\":\"0xb8679179701c31a587c4ce46ba4aec422147598ef0a9c8cf9d200ab4c1731a85\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5c1b6e49aae1e1fbf05ccc8e74ad5bc905a0612b3c4143bec5c72a574c398ec5\",\"dweb:/ipfs/QmPrPMtuL9o2skzXu2r47xpWeUtBi5ZvBXNFiP21K6hAeY\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.21+commit.d9974bed"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDONPublicKey",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "requestId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "response",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "err",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "handleOracleFulfillment"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "getDONPublicKey()": {
            "details": "All Oracles nodes have the corresponding private key needed to decrypt the secrets encrypted with the public key",
            "returns": {
              "_0": "publicKey DON's public key"
            }
          },
          "handleOracleFulfillment(bytes32,bytes,bytes)": {
            "params": {
              "err": "Aggregated error either from the user code or from the execution pipeline. Either response or error parameter will be set, but never both.",
              "requestId": "The requestId returned by FunctionsClient.sendRequest().",
              "response": "Aggregated response from the user code."
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "getDONPublicKey()": {
            "notice": "Returns the DON's secp256k1 public key used to encrypt secrets"
          },
          "handleOracleFulfillment(bytes32,bytes,bytes)": {
            "notice": "Chainlink Functions response handler called by the designated transmitter node in an OCR round."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@ERC3643/=lib/ERC-3643/contracts/",
        "@chainlink/contracts-ccip/=src/v0.8/",
        "@chainlink/contracts/=node_modules/@chainlink/contracts/src/v0.6/",
        "@erc721a/=lib/ERC721A/contracts/",
        "@onchain-id/solidity/contracts/=lib/solidity/contracts/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@prb/test/=lib/prb-test/src/",
        "ERC-3643/=lib/ERC-3643/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/contracts/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/contracts-upgradleable/=lib/openzeppelin-contracts-upgradleable/contracts/",
        "prb-test/=lib/prb-test/src/",
        "solidity/=lib/solidity/contracts/",
        "solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 10000
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "src/v0.8/functions/tests/v0_0_0/testhelpers/mocks/FunctionsClientInterface.sol": "FunctionsClientInterface"
      },
      "libraries": {}
    },
    "sources": {
      "src/v0.8/functions/tests/v0_0_0/testhelpers/mocks/FunctionsClientInterface.sol": {
        "keccak256": "0xb8679179701c31a587c4ce46ba4aec422147598ef0a9c8cf9d200ab4c1731a85",
        "urls": [
          "bzz-raw://5c1b6e49aae1e1fbf05ccc8e74ad5bc905a0612b3c4143bec5c72a574c398ec5",
          "dweb:/ipfs/QmPrPMtuL9o2skzXu2r47xpWeUtBi5ZvBXNFiP21K6hAeY"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/v0.8/functions/tests/v0_0_0/testhelpers/mocks/FunctionsClientInterface.sol",
    "id": 100632,
    "exportedSymbols": {
      "FunctionsClientInterface": [
        100631
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:970:195",
    "nodes": [
      {
        "id": 100613,
        "nodeType": "PragmaDirective",
        "src": "32:23:195",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".6"
        ]
      },
      {
        "id": 100631,
        "nodeType": "ContractDefinition",
        "src": "113:888:195",
        "nodes": [
          {
            "id": 100620,
            "nodeType": "FunctionDefinition",
            "src": "408:64:195",
            "nodes": [],
            "documentation": {
              "id": 100615,
              "nodeType": "StructuredDocumentation",
              "src": "152:253:195",
              "text": " @notice Returns the DON's secp256k1 public key used to encrypt secrets\n @dev All Oracles nodes have the corresponding private key\n needed to decrypt the secrets encrypted with the public key\n @return publicKey DON's public key"
            },
            "functionSelector": "d328a91e",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getDONPublicKey",
            "nameLocation": "417:15:195",
            "parameters": {
              "id": 100616,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "432:2:195"
            },
            "returnParameters": {
              "id": 100619,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 100618,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 100620,
                  "src": "458:12:195",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 100617,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "458:5:195",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "457:14:195"
            },
            "scope": 100631,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 100630,
            "nodeType": "FunctionDefinition",
            "src": "897:102:195",
            "nodes": [],
            "documentation": {
              "id": 100621,
              "nodeType": "StructuredDocumentation",
              "src": "476:418:195",
              "text": " @notice Chainlink Functions response handler called by the designated transmitter node in an OCR round.\n @param requestId The requestId returned by FunctionsClient.sendRequest().\n @param response Aggregated response from the user code.\n @param err Aggregated error either from the user code or from the execution pipeline.\n Either response or error parameter will be set, but never both."
            },
            "functionSelector": "0ca76175",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "handleOracleFulfillment",
            "nameLocation": "906:23:195",
            "parameters": {
              "id": 100628,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 100623,
                  "mutability": "mutable",
                  "name": "requestId",
                  "nameLocation": "938:9:195",
                  "nodeType": "VariableDeclaration",
                  "scope": 100630,
                  "src": "930:17:195",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 100622,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "930:7:195",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 100625,
                  "mutability": "mutable",
                  "name": "response",
                  "nameLocation": "962:8:195",
                  "nodeType": "VariableDeclaration",
                  "scope": 100630,
                  "src": "949:21:195",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 100624,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "949:5:195",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 100627,
                  "mutability": "mutable",
                  "name": "err",
                  "nameLocation": "985:3:195",
                  "nodeType": "VariableDeclaration",
                  "scope": 100630,
                  "src": "972:16:195",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 100626,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "972:5:195",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "929:60:195"
            },
            "returnParameters": {
              "id": 100629,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "998:0:195"
            },
            "scope": 100631,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "FunctionsClientInterface",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 100614,
          "nodeType": "StructuredDocumentation",
          "src": "57:55:195",
          "text": " @title Chainlink Functions client interface."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          100631
        ],
        "name": "FunctionsClientInterface",
        "nameLocation": "123:24:195",
        "scope": 100632,
        "usedErrors": [],
        "usedEvents": []
      }
    ],
    "license": "MIT"
  },
  "id": 195
}