{
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            }
          ],
          "internalType": "struct Internal.PoolUpdate[]",
          "name": "removes",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            }
          ],
          "internalType": "struct Internal.PoolUpdate[]",
          "name": "adds",
          "type": "tuple[]"
        }
      ],
      "name": "applyPoolUpdates",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "destChainSelector",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "receiver",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Client.EVMTokenAmount[]",
              "name": "tokenAmounts",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "extraArgs",
              "type": "bytes"
            }
          ],
          "internalType": "struct Client.EVM2AnyMessage",
          "name": "message",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "feeTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "originalSender",
          "type": "address"
        }
      ],
      "name": "forwardFromRouter",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExpectedNextSequenceNumber",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "destChainSelector",
          "type": "uint64"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "receiver",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Client.EVMTokenAmount[]",
              "name": "tokenAmounts",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "extraArgs",
              "type": "bytes"
            }
          ],
          "internalType": "struct Client.EVM2AnyMessage",
          "name": "message",
          "type": "tuple"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "destChainSelector",
          "type": "uint64"
        },
        {
          "internalType": "contract IERC20",
          "name": "sourceToken",
          "type": "address"
        }
      ],
      "name": "getPoolBySourceToken",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "getSenderNonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "destChainSelector",
          "type": "uint64"
        }
      ],
      "name": "getSupportedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "applyPoolUpdates((address,address)[],(address,address)[])": "3a87ac53",
    "forwardFromRouter(uint64,(bytes,bytes,(address,uint256)[],address,bytes),uint256,address)": "df0aa9e9",
    "getExpectedNextSequenceNumber()": "4120fccd",
    "getFee(uint64,(bytes,bytes,(address,uint256)[],address,bytes))": "20487ded",
    "getPoolBySourceToken(uint64,address)": "48a98aa4",
    "getSenderNonce(address)": "856c8247",
    "getSupportedTokens(uint64)": "fbca3b74"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"internalType\":\"struct Internal.PoolUpdate[]\",\"name\":\"removes\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"internalType\":\"struct Internal.PoolUpdate[]\",\"name\":\"adds\",\"type\":\"tuple[]\"}],\"name\":\"applyPoolUpdates\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"tokenAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"}],\"internalType\":\"struct Client.EVM2AnyMessage\",\"name\":\"message\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"feeTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"originalSender\",\"type\":\"address\"}],\"name\":\"forwardFromRouter\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpectedNextSequenceNumber\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"receiver\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct Client.EVMTokenAmount[]\",\"name\":\"tokenAmounts\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"extraArgs\",\"type\":\"bytes\"}],\"internalType\":\"struct Client.EVM2AnyMessage\",\"name\":\"message\",\"type\":\"tuple\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"},{\"internalType\":\"contract IERC20\",\"name\":\"sourceToken\",\"type\":\"address\"}],\"name\":\"getPoolBySourceToken\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"getSenderNonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"destChainSelector\",\"type\":\"uint64\"}],\"name\":\"getSupportedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"applyPoolUpdates((address,address)[],(address,address)[])\":{\"params\":{\"adds\":\"The tokens and pools to be added.\",\"removes\":\"The tokens and pools to be removed\"}},\"forwardFromRouter(uint64,(bytes,bytes,(address,uint256)[],address,bytes),uint256,address)\":{\"details\":\"only callable by the Routerapprove() must have already been called on the token using the this ramp address as the spender.if the contract is paused, this function will revert.\",\"params\":{\"destChainSelector\":\"The destination chain selector\",\"feeTokenAmount\":\"Amount of fee tokens for payment\",\"message\":\"Message struct to send\",\"originalSender\":\"The original initiator of the CCIP request\"}},\"getExpectedNextSequenceNumber()\":{\"returns\":{\"_0\":\"the next sequence number to be used\"}},\"getFee(uint64,(bytes,bytes,(address,uint256)[],address,bytes))\":{\"params\":{\"destChainSelector\":\"The destination chain selector\",\"message\":\"The message to calculate the cost for\"},\"returns\":{\"fee\":\"The calculated fee\"}},\"getPoolBySourceToken(uint64,address)\":{\"params\":{\"destChainSelector\":\"The destination chain selector\",\"sourceToken\":\"The source chain token to get the pool for\"},\"returns\":{\"_0\":\"pool Token pool\"}},\"getSenderNonce(address)\":{\"params\":{\"sender\":\"The sender to get the nonce for\"},\"returns\":{\"nonce\":\"The next nonce for the sender\"}},\"getSupportedTokens(uint64)\":{\"params\":{\"destChainSelector\":\"The destination chain selector\"},\"returns\":{\"tokens\":\"The addresses of all tokens that this onRamp supports the given destination chain\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"applyPoolUpdates((address,address)[],(address,address)[])\":{\"notice\":\"Adds and removed token pools.\"},\"forwardFromRouter(uint64,(bytes,bytes,(address,uint256)[],address,bytes),uint256,address)\":{\"notice\":\"Send a message to the remote chain\"},\"getExpectedNextSequenceNumber()\":{\"notice\":\"Gets the next sequence number to be used in the onRamp\"},\"getFee(uint64,(bytes,bytes,(address,uint256)[],address,bytes))\":{\"notice\":\"Get the fee for a given ccip message\"},\"getPoolBySourceToken(uint64,address)\":{\"notice\":\"Get the pool for a specific token\"},\"getSenderNonce(address)\":{\"notice\":\"Get the next nonce for a given sender\"},\"getSupportedTokens(uint64)\":{\"notice\":\"Gets a list of all supported source chain tokens.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.8/ccip/interfaces/IEVM2AnyOnRamp.sol\":\"IEVM2AnyOnRamp\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":@ERC3643/=lib/ERC-3643/contracts/\",\":@chainlink/contracts-ccip/=src/v0.8/\",\":@chainlink/contracts/=node_modules/@chainlink/contracts/src/v0.6/\",\":@erc721a/=lib/ERC721A/contracts/\",\":@onchain-id/solidity/contracts/=lib/solidity/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@prb/test/=lib/prb-test/src/\",\":ERC-3643/=lib/ERC-3643/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/contracts-upgradleable/=lib/openzeppelin-contracts-upgradleable/contracts/\",\":prb-test/=lib/prb-test/src/\",\":solidity/=lib/solidity/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"src/v0.8/ccip/interfaces/IEVM2AnyOnRamp.sol\":{\"keccak256\":\"0x8671a00995cc7731723911463eabbfbc2c3ad216e51ab25fecab3f68ca3cd688\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://91b1b198cec723daec1718c4fc930ed1f82de9d16f1f1e1ee058eb4af89b8519\",\"dweb:/ipfs/QmUqANsA1JpSo6sqG1hNV8Cwe58dcrHvEg4ykbCVdSMNnt\"]},\"src/v0.8/ccip/interfaces/IEVM2AnyOnRampClient.sol\":{\"keccak256\":\"0xc69beb65738584d976e62eefebc09f1e578c2a94d83612026cfe700655298453\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://68930d9837c82f57f75e9e38a22a0b272a55269bfe01993adcbd6471803381dc\",\"dweb:/ipfs/QmZhv1LfFwpQcDXMBEhgEaHD9VrbQUkLCDb8uCa5a1Ymw5\"]},\"src/v0.8/ccip/interfaces/pools/IPool.sol\":{\"keccak256\":\"0xd1304829f4a2f244935c2825bb963a2ce885d67716a8286d2e09230679cae840\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0e0cc32b9a6e49b56ebf8231e173c650b29cb83b8d47cbf186564cb5cf4c9e7e\",\"dweb:/ipfs/QmawsMRBgPHyRifjqsY9iw7ebMkzJsKHvDHahYa9A1kLDZ\"]},\"src/v0.8/ccip/libraries/Client.sol\":{\"keccak256\":\"0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://14395fefc8310c9a355262359c8f51036f83c004982fb600164c2a007629f81e\",\"dweb:/ipfs/QmeCLr8a5bDVyLQm8v947ULgV4CZmUeQPjVyWixzieBD5o\"]},\"src/v0.8/ccip/libraries/Internal.sol\":{\"keccak256\":\"0x47b734c896e5a286ff0f18d20fd208bc87150ceb724aebda836c681f58fe2013\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://394af09ff5d59cf031fadf2ada0562ea8703f28582034e1ba8edfd673925df20\",\"dweb:/ipfs/Qmdm4N95RKwq6QLce8scsccT5pvNPAccQKt3i4WniUwLaj\"]},\"src/v0.8/ccip/libraries/MerkleMultiProof.sol\":{\"keccak256\":\"0x9f2e5edd718cd1b5aa7143ca39ee50d7c15b8456ce32c49c10833c9ef3b0eb72\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://c2591501ed4b28164009e58166324634a0ce79a0599ee682d47d825f302a9955\",\"dweb:/ipfs/QmeN35m4PFQDBc1ew2Q5koYNfchf8DcTemUmXVFVSuZV5t\"]},\"src/v0.8/vendor/openzeppelin-solidity/v4.8.0/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x527e858729af8197f6c8f99554d32bfc4f5a72b15975489c94809363d7ae522f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6828dfa867eaff18f383aad4ca4b5aaedb93109023d74aaf418fee6c06e556c2\",\"dweb:/ipfs/QmXSQ9WnaJ6Ba9gvKvgNxDY7sa7ATJ9V55uwGSGCpBuJKu\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.21+commit.d9974bed"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "struct Internal.PoolUpdate[]",
              "name": "removes",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "pool",
                  "type": "address"
                }
              ]
            },
            {
              "internalType": "struct Internal.PoolUpdate[]",
              "name": "adds",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "address",
                  "name": "token",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "pool",
                  "type": "address"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "applyPoolUpdates"
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "destChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "struct Client.EVM2AnyMessage",
              "name": "message",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes",
                  "name": "receiver",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "struct Client.EVMTokenAmount[]",
                  "name": "tokenAmounts",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "address",
                  "name": "feeToken",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "extraArgs",
                  "type": "bytes"
                }
              ]
            },
            {
              "internalType": "uint256",
              "name": "feeTokenAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "originalSender",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "forwardFromRouter",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getExpectedNextSequenceNumber",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "destChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "struct Client.EVM2AnyMessage",
              "name": "message",
              "type": "tuple",
              "components": [
                {
                  "internalType": "bytes",
                  "name": "receiver",
                  "type": "bytes"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                },
                {
                  "internalType": "struct Client.EVMTokenAmount[]",
                  "name": "tokenAmounts",
                  "type": "tuple[]",
                  "components": [
                    {
                      "internalType": "address",
                      "name": "token",
                      "type": "address"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ]
                },
                {
                  "internalType": "address",
                  "name": "feeToken",
                  "type": "address"
                },
                {
                  "internalType": "bytes",
                  "name": "extraArgs",
                  "type": "bytes"
                }
              ]
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getFee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "destChainSelector",
              "type": "uint64"
            },
            {
              "internalType": "contract IERC20",
              "name": "sourceToken",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getPoolBySourceToken",
          "outputs": [
            {
              "internalType": "contract IPool",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getSenderNonce",
          "outputs": [
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "destChainSelector",
              "type": "uint64"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getSupportedTokens",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "tokens",
              "type": "address[]"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "applyPoolUpdates((address,address)[],(address,address)[])": {
            "params": {
              "adds": "The tokens and pools to be added.",
              "removes": "The tokens and pools to be removed"
            }
          },
          "forwardFromRouter(uint64,(bytes,bytes,(address,uint256)[],address,bytes),uint256,address)": {
            "details": "only callable by the Routerapprove() must have already been called on the token using the this ramp address as the spender.if the contract is paused, this function will revert.",
            "params": {
              "destChainSelector": "The destination chain selector",
              "feeTokenAmount": "Amount of fee tokens for payment",
              "message": "Message struct to send",
              "originalSender": "The original initiator of the CCIP request"
            }
          },
          "getExpectedNextSequenceNumber()": {
            "returns": {
              "_0": "the next sequence number to be used"
            }
          },
          "getFee(uint64,(bytes,bytes,(address,uint256)[],address,bytes))": {
            "params": {
              "destChainSelector": "The destination chain selector",
              "message": "The message to calculate the cost for"
            },
            "returns": {
              "fee": "The calculated fee"
            }
          },
          "getPoolBySourceToken(uint64,address)": {
            "params": {
              "destChainSelector": "The destination chain selector",
              "sourceToken": "The source chain token to get the pool for"
            },
            "returns": {
              "_0": "pool Token pool"
            }
          },
          "getSenderNonce(address)": {
            "params": {
              "sender": "The sender to get the nonce for"
            },
            "returns": {
              "nonce": "The next nonce for the sender"
            }
          },
          "getSupportedTokens(uint64)": {
            "params": {
              "destChainSelector": "The destination chain selector"
            },
            "returns": {
              "tokens": "The addresses of all tokens that this onRamp supports the given destination chain"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "applyPoolUpdates((address,address)[],(address,address)[])": {
            "notice": "Adds and removed token pools."
          },
          "forwardFromRouter(uint64,(bytes,bytes,(address,uint256)[],address,bytes),uint256,address)": {
            "notice": "Send a message to the remote chain"
          },
          "getExpectedNextSequenceNumber()": {
            "notice": "Gets the next sequence number to be used in the onRamp"
          },
          "getFee(uint64,(bytes,bytes,(address,uint256)[],address,bytes))": {
            "notice": "Get the fee for a given ccip message"
          },
          "getPoolBySourceToken(uint64,address)": {
            "notice": "Get the pool for a specific token"
          },
          "getSenderNonce(address)": {
            "notice": "Get the next nonce for a given sender"
          },
          "getSupportedTokens(uint64)": {
            "notice": "Gets a list of all supported source chain tokens."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@ERC3643/=lib/ERC-3643/contracts/",
        "@chainlink/contracts-ccip/=src/v0.8/",
        "@chainlink/contracts/=node_modules/@chainlink/contracts/src/v0.6/",
        "@erc721a/=lib/ERC721A/contracts/",
        "@onchain-id/solidity/contracts/=lib/solidity/contracts/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@prb/test/=lib/prb-test/src/",
        "ERC-3643/=lib/ERC-3643/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/contracts/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/contracts-upgradleable/=lib/openzeppelin-contracts-upgradleable/contracts/",
        "prb-test/=lib/prb-test/src/",
        "solidity/=lib/solidity/contracts/",
        "solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 10000
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "src/v0.8/ccip/interfaces/IEVM2AnyOnRamp.sol": "IEVM2AnyOnRamp"
      },
      "libraries": {}
    },
    "sources": {
      "src/v0.8/ccip/interfaces/IEVM2AnyOnRamp.sol": {
        "keccak256": "0x8671a00995cc7731723911463eabbfbc2c3ad216e51ab25fecab3f68ca3cd688",
        "urls": [
          "bzz-raw://91b1b198cec723daec1718c4fc930ed1f82de9d16f1f1e1ee058eb4af89b8519",
          "dweb:/ipfs/QmUqANsA1JpSo6sqG1hNV8Cwe58dcrHvEg4ykbCVdSMNnt"
        ],
        "license": "MIT"
      },
      "src/v0.8/ccip/interfaces/IEVM2AnyOnRampClient.sol": {
        "keccak256": "0xc69beb65738584d976e62eefebc09f1e578c2a94d83612026cfe700655298453",
        "urls": [
          "bzz-raw://68930d9837c82f57f75e9e38a22a0b272a55269bfe01993adcbd6471803381dc",
          "dweb:/ipfs/QmZhv1LfFwpQcDXMBEhgEaHD9VrbQUkLCDb8uCa5a1Ymw5"
        ],
        "license": "MIT"
      },
      "src/v0.8/ccip/interfaces/pools/IPool.sol": {
        "keccak256": "0xd1304829f4a2f244935c2825bb963a2ce885d67716a8286d2e09230679cae840",
        "urls": [
          "bzz-raw://0e0cc32b9a6e49b56ebf8231e173c650b29cb83b8d47cbf186564cb5cf4c9e7e",
          "dweb:/ipfs/QmawsMRBgPHyRifjqsY9iw7ebMkzJsKHvDHahYa9A1kLDZ"
        ],
        "license": "MIT"
      },
      "src/v0.8/ccip/libraries/Client.sol": {
        "keccak256": "0x8af3ac1085c87342373772fb1a0107c7b90258e6bfed318ab2a601a14477e679",
        "urls": [
          "bzz-raw://14395fefc8310c9a355262359c8f51036f83c004982fb600164c2a007629f81e",
          "dweb:/ipfs/QmeCLr8a5bDVyLQm8v947ULgV4CZmUeQPjVyWixzieBD5o"
        ],
        "license": "MIT"
      },
      "src/v0.8/ccip/libraries/Internal.sol": {
        "keccak256": "0x47b734c896e5a286ff0f18d20fd208bc87150ceb724aebda836c681f58fe2013",
        "urls": [
          "bzz-raw://394af09ff5d59cf031fadf2ada0562ea8703f28582034e1ba8edfd673925df20",
          "dweb:/ipfs/Qmdm4N95RKwq6QLce8scsccT5pvNPAccQKt3i4WniUwLaj"
        ],
        "license": "MIT"
      },
      "src/v0.8/ccip/libraries/MerkleMultiProof.sol": {
        "keccak256": "0x9f2e5edd718cd1b5aa7143ca39ee50d7c15b8456ce32c49c10833c9ef3b0eb72",
        "urls": [
          "bzz-raw://c2591501ed4b28164009e58166324634a0ce79a0599ee682d47d825f302a9955",
          "dweb:/ipfs/QmeN35m4PFQDBc1ew2Q5koYNfchf8DcTemUmXVFVSuZV5t"
        ],
        "license": "BUSL-1.1"
      },
      "src/v0.8/vendor/openzeppelin-solidity/v4.8.0/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x527e858729af8197f6c8f99554d32bfc4f5a72b15975489c94809363d7ae522f",
        "urls": [
          "bzz-raw://6828dfa867eaff18f383aad4ca4b5aaedb93109023d74aaf418fee6c06e556c2",
          "dweb:/ipfs/QmXSQ9WnaJ6Ba9gvKvgNxDY7sa7ATJ9V55uwGSGCpBuJKu"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/v0.8/ccip/interfaces/IEVM2AnyOnRamp.sol",
    "id": 70927,
    "exportedSymbols": {
      "IEVM2AnyOnRamp": [
        70926
      ],
      "IEVM2AnyOnRampClient": [
        70982
      ],
      "Internal": [
        71518
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:890:113",
    "nodes": [
      {
        "id": 70893,
        "nodeType": "PragmaDirective",
        "src": "32:23:113",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ]
      },
      {
        "id": 70895,
        "nodeType": "ImportDirective",
        "src": "57:64:113",
        "nodes": [],
        "absolutePath": "src/v0.8/ccip/interfaces/IEVM2AnyOnRampClient.sol",
        "file": "./IEVM2AnyOnRampClient.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 70927,
        "sourceUnit": 70983,
        "symbolAliases": [
          {
            "foreign": {
              "id": 70894,
              "name": "IEVM2AnyOnRampClient",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 70982,
              "src": "65:20:113",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 70897,
        "nodeType": "ImportDirective",
        "src": "123:51:113",
        "nodes": [],
        "absolutePath": "src/v0.8/ccip/libraries/Internal.sol",
        "file": "../libraries/Internal.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 70927,
        "sourceUnit": 71519,
        "symbolAliases": [
          {
            "foreign": {
              "id": 70896,
              "name": "Internal",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 71518,
              "src": "131:8:113",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 70926,
        "nodeType": "ContractDefinition",
        "src": "176:745:113",
        "nodes": [
          {
            "id": 70905,
            "nodeType": "FunctionDefinition",
            "src": "348:72:113",
            "nodes": [],
            "documentation": {
              "id": 70900,
              "nodeType": "StructuredDocumentation",
              "src": "229:116:113",
              "text": "@notice Gets the next sequence number to be used in the onRamp\n @return the next sequence number to be used"
            },
            "functionSelector": "4120fccd",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getExpectedNextSequenceNumber",
            "nameLocation": "357:29:113",
            "parameters": {
              "id": 70901,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "386:2:113"
            },
            "returnParameters": {
              "id": 70904,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 70903,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 70905,
                  "src": "412:6:113",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 70902,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "412:6:113",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "411:8:113"
            },
            "scope": 70926,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 70913,
            "nodeType": "FunctionDefinition",
            "src": "578:77:113",
            "nodes": [],
            "documentation": {
              "id": 70906,
              "nodeType": "StructuredDocumentation",
              "src": "424:151:113",
              "text": "@notice Get the next nonce for a given sender\n @param sender The sender to get the nonce for\n @return nonce The next nonce for the sender"
            },
            "functionSelector": "856c8247",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getSenderNonce",
            "nameLocation": "587:14:113",
            "parameters": {
              "id": 70909,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 70908,
                  "mutability": "mutable",
                  "name": "sender",
                  "nameLocation": "610:6:113",
                  "nodeType": "VariableDeclaration",
                  "scope": 70913,
                  "src": "602:14:113",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 70907,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "602:7:113",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "601:16:113"
            },
            "returnParameters": {
              "id": 70912,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 70911,
                  "mutability": "mutable",
                  "name": "nonce",
                  "nameLocation": "648:5:113",
                  "nodeType": "VariableDeclaration",
                  "scope": 70913,
                  "src": "641:12:113",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 70910,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "641:6:113",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "640:14:113"
            },
            "scope": 70926,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 70925,
            "nodeType": "FunctionDefinition",
            "src": "811:108:113",
            "nodes": [],
            "documentation": {
              "id": 70914,
              "nodeType": "StructuredDocumentation",
              "src": "659:149:113",
              "text": "@notice Adds and removed token pools.\n @param removes The tokens and pools to be removed\n @param adds The tokens and pools to be added."
            },
            "functionSelector": "3a87ac53",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "applyPoolUpdates",
            "nameLocation": "820:16:113",
            "parameters": {
              "id": 70923,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 70918,
                  "mutability": "mutable",
                  "name": "removes",
                  "nameLocation": "866:7:113",
                  "nodeType": "VariableDeclaration",
                  "scope": 70925,
                  "src": "837:36:113",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_PoolUpdate_$71357_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct Internal.PoolUpdate[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 70916,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 70915,
                        "name": "Internal.PoolUpdate",
                        "nameLocations": [
                          "837:8:113",
                          "846:10:113"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 71357,
                        "src": "837:19:113"
                      },
                      "referencedDeclaration": 71357,
                      "src": "837:19:113",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_PoolUpdate_$71357_storage_ptr",
                        "typeString": "struct Internal.PoolUpdate"
                      }
                    },
                    "id": 70917,
                    "nodeType": "ArrayTypeName",
                    "src": "837:21:113",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_PoolUpdate_$71357_storage_$dyn_storage_ptr",
                      "typeString": "struct Internal.PoolUpdate[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 70922,
                  "mutability": "mutable",
                  "name": "adds",
                  "nameLocation": "904:4:113",
                  "nodeType": "VariableDeclaration",
                  "scope": 70925,
                  "src": "875:33:113",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_PoolUpdate_$71357_memory_ptr_$dyn_memory_ptr",
                    "typeString": "struct Internal.PoolUpdate[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 70920,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 70919,
                        "name": "Internal.PoolUpdate",
                        "nameLocations": [
                          "875:8:113",
                          "884:10:113"
                        ],
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 71357,
                        "src": "875:19:113"
                      },
                      "referencedDeclaration": 71357,
                      "src": "875:19:113",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_PoolUpdate_$71357_storage_ptr",
                        "typeString": "struct Internal.PoolUpdate"
                      }
                    },
                    "id": 70921,
                    "nodeType": "ArrayTypeName",
                    "src": "875:21:113",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_struct$_PoolUpdate_$71357_storage_$dyn_storage_ptr",
                      "typeString": "struct Internal.PoolUpdate[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "836:73:113"
            },
            "returnParameters": {
              "id": 70924,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "918:0:113"
            },
            "scope": 70926,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 70898,
              "name": "IEVM2AnyOnRampClient",
              "nameLocations": [
                "204:20:113"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 70982,
              "src": "204:20:113"
            },
            "id": 70899,
            "nodeType": "InheritanceSpecifier",
            "src": "204:20:113"
          }
        ],
        "canonicalName": "IEVM2AnyOnRamp",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          70926,
          70982
        ],
        "name": "IEVM2AnyOnRamp",
        "nameLocation": "186:14:113",
        "scope": 70927,
        "usedErrors": [],
        "usedEvents": []
      }
    ],
    "license": "MIT"
  },
  "id": 113
}