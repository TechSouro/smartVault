{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "node",
          "type": "address"
        }
      ],
      "name": "deleteNodePublicKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "gasPrice",
          "type": "uint256"
        }
      ],
      "name": "estimateCost",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllNodePublicKeys",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDONPublicKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRegistry",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "subscriptionId",
              "type": "uint64"
            },
            {
              "internalType": "address",
              "name": "client",
              "type": "address"
            },
            {
              "internalType": "uint32",
              "name": "gasLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "gasPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct FunctionsBillingRegistryInterface.RequestBilling",
          "name": "billing",
          "type": "tuple"
        }
      ],
      "name": "getRequiredFee",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        }
      ],
      "name": "sendRequest",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "donPublicKey",
          "type": "bytes"
        }
      ],
      "name": "setDONPublicKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "node",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "publicKey",
          "type": "bytes"
        }
      ],
      "name": "setNodePublicKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "registryAddress",
          "type": "address"
        }
      ],
      "name": "setRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "deleteNodePublicKey(address)": "26ceabac",
    "estimateCost(uint64,bytes,uint32,uint256)": "d227d245",
    "getAllNodePublicKeys()": "53398987",
    "getDONPublicKey()": "d328a91e",
    "getRegistry()": "5ab1bd53",
    "getRequiredFee(bytes,(uint64,address,uint32,uint256))": "f1e14a21",
    "sendRequest(uint64,bytes,uint32)": "28242b04",
    "setDONPublicKey(bytes)": "7f15e166",
    "setNodePublicKey(address,bytes)": "80756031",
    "setRegistry(address)": "a91ee0dc"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"}],\"name\":\"deleteNodePublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"estimateCost\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllNodePublicKeys\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDONPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct FunctionsBillingRegistryInterface.RequestBilling\",\"name\":\"billing\",\"type\":\"tuple\"}],\"name\":\"getRequiredFee\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"}],\"name\":\"sendRequest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"donPublicKey\",\"type\":\"bytes\"}],\"name\":\"setDONPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"node\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"setNodePublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"registryAddress\",\"type\":\"address\"}],\"name\":\"setRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"deleteNodePublicKey(address)\":{\"details\":\"Callable only by contract owner or the node itself\",\"params\":{\"node\":\"node's address\"}},\"estimateCost(uint64,bytes,uint32,uint256)\":{\"params\":{\"data\":\"Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\",\"gasLimit\":\"Gas limit for the fulfillment callback\",\"subscriptionId\":\"A unique subscription ID allocated by billing system, a client can make requests from different contracts referencing the same subscription\"},\"returns\":{\"_0\":\"billedCost Cost in Juels (1e18) of LINK\"}},\"getDONPublicKey()\":{\"details\":\"All nodes on the DON have the corresponding private key needed to decrypt the secrets encrypted with the public key\",\"returns\":{\"_0\":\"publicKey the DON's public key\"}},\"getRegistry()\":{\"returns\":{\"_0\":\"registryAddress The address of Chainlink Functions billing registry contract\"}},\"getRequiredFee(bytes,(uint64,address,uint32,uint256))\":{\"params\":{\"billing\":\"The request's billing configuration\",\"data\":\"Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\"},\"returns\":{\"_0\":\"fee Cost in Juels (1e18) of LINK\"}},\"sendRequest(uint64,bytes,uint32)\":{\"params\":{\"data\":\"Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\",\"gasLimit\":\"Gas limit for the fulfillment callback\",\"subscriptionId\":\"A unique subscription ID allocated by billing system, a client can make requests from different contracts referencing the same subscription\"},\"returns\":{\"_0\":\"requestId A unique request identifier (unique per DON)\"}},\"setDONPublicKey(bytes)\":{\"details\":\"Used to rotate the key\",\"params\":{\"donPublicKey\":\"The new public key\"}},\"setNodePublicKey(address,bytes)\":{\"details\":\"Callable only by contract owner and DON members\",\"params\":{\"node\":\"node's address\",\"publicKey\":\"node's public key\"}},\"setRegistry(address)\":{\"params\":{\"registryAddress\":\"The new address of Chainlink Functions billing registry contract\"}}},\"title\":\"Chainlink Functions oracle interface.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deleteNodePublicKey(address)\":{\"notice\":\"Deletes node's public key\"},\"estimateCost(uint64,bytes,uint32,uint256)\":{\"notice\":\"Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\"},\"getAllNodePublicKeys()\":{\"notice\":\"Return two arrays of equal size containing DON members' addresses and their corresponding public keys (or empty byte arrays if per-node key is not defined)\"},\"getDONPublicKey()\":{\"notice\":\"Returns the DON's secp256k1 public key that is used to encrypt secrets\"},\"getRegistry()\":{\"notice\":\"Gets the stored billing registry address\"},\"getRequiredFee(bytes,(uint64,address,uint32,uint256))\":{\"notice\":\"Determine the fee charged by the DON that will be split between signing Node Operators for servicing the request\"},\"sendRequest(uint64,bytes,uint32)\":{\"notice\":\"Sends a request (encoded as data) using the provided subscriptionId\"},\"setDONPublicKey(bytes)\":{\"notice\":\"Sets DON's secp256k1 public key used to encrypt secrets\"},\"setNodePublicKey(address,bytes)\":{\"notice\":\"Sets a per-node secp256k1 public key used to encrypt secrets for that node\"},\"setRegistry(address)\":{\"notice\":\"Sets the stored billing registry address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/v0.8/functions/tests/v0_0_0/testhelpers/mocks/FunctionsOracleInterface.sol\":\"FunctionsOracleInterface\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[\":@ERC3643/=lib/ERC-3643/contracts/\",\":@chainlink/contracts-ccip/=src/v0.8/\",\":@chainlink/contracts/=node_modules/@chainlink/contracts/src/v0.6/\",\":@erc721a/=lib/ERC721A/contracts/\",\":@onchain-id/solidity/contracts/=lib/solidity/contracts/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@prb/test/=lib/prb-test/src/\",\":ERC-3643/=lib/ERC-3643/contracts/\",\":ERC721A/=lib/ERC721A/contracts/\",\":chainlink/=lib/chainlink/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin/contracts-upgradleable/=lib/openzeppelin-contracts-upgradleable/contracts/\",\":prb-test/=lib/prb-test/src/\",\":solidity/=lib/solidity/contracts/\",\":solmate/=lib/solmate/src/\"]},\"sources\":{\"src/v0.8/functions/tests/v0_0_0/testhelpers/mocks/FunctionsBillingRegistryInterface.sol\":{\"keccak256\":\"0x3e467b67c5c10bd3015bfa62c1f80d0ffefb9f4d0fd4702d55f709527b729196\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3694f1098d087038fbbd94dfb358911702d047b2d0784894ab8baea68054b46c\",\"dweb:/ipfs/QmS47Mf579VjHXaso5jBpPNZ8kWMbogurXnQT9htcKNYR7\"]},\"src/v0.8/functions/tests/v0_0_0/testhelpers/mocks/FunctionsOracleInterface.sol\":{\"keccak256\":\"0xa6f3b418bcdbfee252c90bb47ef54f321189f2544d95dd3206dbc591f5d38ab5\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e1d2a77e00186e1539e54bc0be41cfba2e00561ff5a48520e0e4fabc27b479ec\",\"dweb:/ipfs/QmRBrh53WPu8VVFXMD8oJsrUXMwpwJDJGmHtBEuKRNpSzV\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.21+commit.d9974bed"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "node",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "deleteNodePublicKey"
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "subscriptionId",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint32",
              "name": "gasLimit",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "gasPrice",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "estimateCost",
          "outputs": [
            {
              "internalType": "uint96",
              "name": "",
              "type": "uint96"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getAllNodePublicKeys",
          "outputs": [
            {
              "internalType": "address[]",
              "name": "",
              "type": "address[]"
            },
            {
              "internalType": "bytes[]",
              "name": "",
              "type": "bytes[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getDONPublicKey",
          "outputs": [
            {
              "internalType": "bytes",
              "name": "",
              "type": "bytes"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "getRegistry",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "struct FunctionsBillingRegistryInterface.RequestBilling",
              "name": "billing",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint64",
                  "name": "subscriptionId",
                  "type": "uint64"
                },
                {
                  "internalType": "address",
                  "name": "client",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "gasLimit",
                  "type": "uint32"
                },
                {
                  "internalType": "uint256",
                  "name": "gasPrice",
                  "type": "uint256"
                }
              ]
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getRequiredFee",
          "outputs": [
            {
              "internalType": "uint96",
              "name": "",
              "type": "uint96"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint64",
              "name": "subscriptionId",
              "type": "uint64"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint32",
              "name": "gasLimit",
              "type": "uint32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "sendRequest",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "donPublicKey",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setDONPublicKey"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "node",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "publicKey",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setNodePublicKey"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "registryAddress",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "setRegistry"
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "deleteNodePublicKey(address)": {
            "details": "Callable only by contract owner or the node itself",
            "params": {
              "node": "node's address"
            }
          },
          "estimateCost(uint64,bytes,uint32,uint256)": {
            "params": {
              "data": "Encoded Chainlink Functions request data, use FunctionsClient API to encode a request",
              "gasLimit": "Gas limit for the fulfillment callback",
              "subscriptionId": "A unique subscription ID allocated by billing system, a client can make requests from different contracts referencing the same subscription"
            },
            "returns": {
              "_0": "billedCost Cost in Juels (1e18) of LINK"
            }
          },
          "getDONPublicKey()": {
            "details": "All nodes on the DON have the corresponding private key needed to decrypt the secrets encrypted with the public key",
            "returns": {
              "_0": "publicKey the DON's public key"
            }
          },
          "getRegistry()": {
            "returns": {
              "_0": "registryAddress The address of Chainlink Functions billing registry contract"
            }
          },
          "getRequiredFee(bytes,(uint64,address,uint32,uint256))": {
            "params": {
              "billing": "The request's billing configuration",
              "data": "Encoded Chainlink Functions request data, use FunctionsClient API to encode a request"
            },
            "returns": {
              "_0": "fee Cost in Juels (1e18) of LINK"
            }
          },
          "sendRequest(uint64,bytes,uint32)": {
            "params": {
              "data": "Encoded Chainlink Functions request data, use FunctionsClient API to encode a request",
              "gasLimit": "Gas limit for the fulfillment callback",
              "subscriptionId": "A unique subscription ID allocated by billing system, a client can make requests from different contracts referencing the same subscription"
            },
            "returns": {
              "_0": "requestId A unique request identifier (unique per DON)"
            }
          },
          "setDONPublicKey(bytes)": {
            "details": "Used to rotate the key",
            "params": {
              "donPublicKey": "The new public key"
            }
          },
          "setNodePublicKey(address,bytes)": {
            "details": "Callable only by contract owner and DON members",
            "params": {
              "node": "node's address",
              "publicKey": "node's public key"
            }
          },
          "setRegistry(address)": {
            "params": {
              "registryAddress": "The new address of Chainlink Functions billing registry contract"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "deleteNodePublicKey(address)": {
            "notice": "Deletes node's public key"
          },
          "estimateCost(uint64,bytes,uint32,uint256)": {
            "notice": "Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee"
          },
          "getAllNodePublicKeys()": {
            "notice": "Return two arrays of equal size containing DON members' addresses and their corresponding public keys (or empty byte arrays if per-node key is not defined)"
          },
          "getDONPublicKey()": {
            "notice": "Returns the DON's secp256k1 public key that is used to encrypt secrets"
          },
          "getRegistry()": {
            "notice": "Gets the stored billing registry address"
          },
          "getRequiredFee(bytes,(uint64,address,uint32,uint256))": {
            "notice": "Determine the fee charged by the DON that will be split between signing Node Operators for servicing the request"
          },
          "sendRequest(uint64,bytes,uint32)": {
            "notice": "Sends a request (encoded as data) using the provided subscriptionId"
          },
          "setDONPublicKey(bytes)": {
            "notice": "Sets DON's secp256k1 public key used to encrypt secrets"
          },
          "setNodePublicKey(address,bytes)": {
            "notice": "Sets a per-node secp256k1 public key used to encrypt secrets for that node"
          },
          "setRegistry(address)": {
            "notice": "Sets the stored billing registry address"
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@ERC3643/=lib/ERC-3643/contracts/",
        "@chainlink/contracts-ccip/=src/v0.8/",
        "@chainlink/contracts/=node_modules/@chainlink/contracts/src/v0.6/",
        "@erc721a/=lib/ERC721A/contracts/",
        "@onchain-id/solidity/contracts/=lib/solidity/contracts/",
        "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
        "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
        "@prb/test/=lib/prb-test/src/",
        "ERC-3643/=lib/ERC-3643/contracts/",
        "ERC721A/=lib/ERC721A/contracts/",
        "chainlink/=lib/chainlink/contracts/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/openzeppelin-contracts/",
        "openzeppelin/contracts-upgradleable/=lib/openzeppelin-contracts-upgradleable/contracts/",
        "prb-test/=lib/prb-test/src/",
        "solidity/=lib/solidity/contracts/",
        "solmate/=lib/solmate/src/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 10000
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "compilationTarget": {
        "src/v0.8/functions/tests/v0_0_0/testhelpers/mocks/FunctionsOracleInterface.sol": "FunctionsOracleInterface"
      },
      "libraries": {}
    },
    "sources": {
      "src/v0.8/functions/tests/v0_0_0/testhelpers/mocks/FunctionsBillingRegistryInterface.sol": {
        "keccak256": "0x3e467b67c5c10bd3015bfa62c1f80d0ffefb9f4d0fd4702d55f709527b729196",
        "urls": [
          "bzz-raw://3694f1098d087038fbbd94dfb358911702d047b2d0784894ab8baea68054b46c",
          "dweb:/ipfs/QmS47Mf579VjHXaso5jBpPNZ8kWMbogurXnQT9htcKNYR7"
        ],
        "license": "MIT"
      },
      "src/v0.8/functions/tests/v0_0_0/testhelpers/mocks/FunctionsOracleInterface.sol": {
        "keccak256": "0xa6f3b418bcdbfee252c90bb47ef54f321189f2544d95dd3206dbc591f5d38ab5",
        "urls": [
          "bzz-raw://e1d2a77e00186e1539e54bc0be41cfba2e00561ff5a48520e0e4fabc27b479ec",
          "dweb:/ipfs/QmRBrh53WPu8VVFXMD8oJsrUXMwpwJDJGmHtBEuKRNpSzV"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/v0.8/functions/tests/v0_0_0/testhelpers/mocks/FunctionsOracleInterface.sol",
    "id": 100722,
    "exportedSymbols": {
      "FunctionsBillingRegistryInterface": [
        96323
      ],
      "FunctionsOracleInterface": [
        100721
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:3769:196",
    "nodes": [
      {
        "id": 100633,
        "nodeType": "PragmaDirective",
        "src": "32:23:196",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".6"
        ]
      },
      {
        "id": 100634,
        "nodeType": "ImportDirective",
        "src": "57:49:196",
        "nodes": [],
        "absolutePath": "src/v0.8/functions/tests/v0_0_0/testhelpers/mocks/FunctionsBillingRegistryInterface.sol",
        "file": "./FunctionsBillingRegistryInterface.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 100722,
        "sourceUnit": 96324,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 100721,
        "nodeType": "ContractDefinition",
        "src": "164:3636:196",
        "nodes": [
          {
            "id": 100641,
            "nodeType": "FunctionDefinition",
            "src": "359:55:196",
            "nodes": [],
            "documentation": {
              "id": 100636,
              "nodeType": "StructuredDocumentation",
              "src": "203:153:196",
              "text": " @notice Gets the stored billing registry address\n @return registryAddress The address of Chainlink Functions billing registry contract"
            },
            "functionSelector": "5ab1bd53",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRegistry",
            "nameLocation": "368:11:196",
            "parameters": {
              "id": 100637,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "379:2:196"
            },
            "returnParameters": {
              "id": 100640,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 100639,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 100641,
                  "src": "405:7:196",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 100638,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "405:7:196",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "404:9:196"
            },
            "scope": 100721,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 100647,
            "nodeType": "FunctionDefinition",
            "src": "577:55:196",
            "nodes": [],
            "documentation": {
              "id": 100642,
              "nodeType": "StructuredDocumentation",
              "src": "418:156:196",
              "text": " @notice Sets the stored billing registry address\n @param registryAddress The new address of Chainlink Functions billing registry contract"
            },
            "functionSelector": "a91ee0dc",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setRegistry",
            "nameLocation": "586:11:196",
            "parameters": {
              "id": 100645,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 100644,
                  "mutability": "mutable",
                  "name": "registryAddress",
                  "nameLocation": "606:15:196",
                  "nodeType": "VariableDeclaration",
                  "scope": 100647,
                  "src": "598:23:196",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 100643,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "598:7:196",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "597:25:196"
            },
            "returnParameters": {
              "id": 100646,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "631:0:196"
            },
            "scope": 100721,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 100653,
            "nodeType": "FunctionDefinition",
            "src": "907:64:196",
            "nodes": [],
            "documentation": {
              "id": 100648,
              "nodeType": "StructuredDocumentation",
              "src": "636:268:196",
              "text": " @notice Returns the DON's secp256k1 public key that is used to encrypt secrets\n @dev All nodes on the DON have the corresponding private key\n needed to decrypt the secrets encrypted with the public key\n @return publicKey the DON's public key"
            },
            "functionSelector": "d328a91e",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getDONPublicKey",
            "nameLocation": "916:15:196",
            "parameters": {
              "id": 100649,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "931:2:196"
            },
            "returnParameters": {
              "id": 100652,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 100651,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 100653,
                  "src": "957:12:196",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_memory_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 100650,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "957:5:196",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "956:14:196"
            },
            "scope": 100721,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 100659,
            "nodeType": "FunctionDefinition",
            "src": "1133:63:196",
            "nodes": [],
            "documentation": {
              "id": 100654,
              "nodeType": "StructuredDocumentation",
              "src": "975:155:196",
              "text": " @notice Sets DON's secp256k1 public key used to encrypt secrets\n @dev Used to rotate the key\n @param donPublicKey The new public key"
            },
            "functionSelector": "7f15e166",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setDONPublicKey",
            "nameLocation": "1142:15:196",
            "parameters": {
              "id": 100657,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 100656,
                  "mutability": "mutable",
                  "name": "donPublicKey",
                  "nameLocation": "1173:12:196",
                  "nodeType": "VariableDeclaration",
                  "scope": 100659,
                  "src": "1158:27:196",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 100655,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1158:5:196",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1157:29:196"
            },
            "returnParameters": {
              "id": 100658,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1195:0:196"
            },
            "scope": 100721,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 100667,
            "nodeType": "FunctionDefinition",
            "src": "1430:75:196",
            "nodes": [],
            "documentation": {
              "id": 100660,
              "nodeType": "StructuredDocumentation",
              "src": "1200:227:196",
              "text": " @notice Sets a per-node secp256k1 public key used to encrypt secrets for that node\n @dev Callable only by contract owner and DON members\n @param node node's address\n @param publicKey node's public key"
            },
            "functionSelector": "80756031",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setNodePublicKey",
            "nameLocation": "1439:16:196",
            "parameters": {
              "id": 100665,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 100662,
                  "mutability": "mutable",
                  "name": "node",
                  "nameLocation": "1464:4:196",
                  "nodeType": "VariableDeclaration",
                  "scope": 100667,
                  "src": "1456:12:196",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 100661,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1456:7:196",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 100664,
                  "mutability": "mutable",
                  "name": "publicKey",
                  "nameLocation": "1485:9:196",
                  "nodeType": "VariableDeclaration",
                  "scope": 100667,
                  "src": "1470:24:196",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 100663,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "1470:5:196",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1455:40:196"
            },
            "returnParameters": {
              "id": 100666,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1504:0:196"
            },
            "scope": 100721,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 100673,
            "nodeType": "FunctionDefinition",
            "src": "1653:52:196",
            "nodes": [],
            "documentation": {
              "id": 100668,
              "nodeType": "StructuredDocumentation",
              "src": "1509:141:196",
              "text": " @notice Deletes node's public key\n @dev Callable only by contract owner or the node itself\n @param node node's address"
            },
            "functionSelector": "26ceabac",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "deleteNodePublicKey",
            "nameLocation": "1662:19:196",
            "parameters": {
              "id": 100671,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 100670,
                  "mutability": "mutable",
                  "name": "node",
                  "nameLocation": "1690:4:196",
                  "nodeType": "VariableDeclaration",
                  "scope": 100673,
                  "src": "1682:12:196",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 100669,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1682:7:196",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1681:14:196"
            },
            "returnParameters": {
              "id": 100672,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1704:0:196"
            },
            "scope": 100721,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 100683,
            "nodeType": "FunctionDefinition",
            "src": "1895:89:196",
            "nodes": [],
            "documentation": {
              "id": 100674,
              "nodeType": "StructuredDocumentation",
              "src": "1709:183:196",
              "text": " @notice Return two arrays of equal size containing DON members' addresses and their corresponding\n public keys (or empty byte arrays if per-node key is not defined)"
            },
            "functionSelector": "53398987",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getAllNodePublicKeys",
            "nameLocation": "1904:20:196",
            "parameters": {
              "id": 100675,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1924:2:196"
            },
            "returnParameters": {
              "id": 100682,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 100678,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 100683,
                  "src": "1950:16:196",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 100676,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1950:7:196",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 100677,
                    "nodeType": "ArrayTypeName",
                    "src": "1950:9:196",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 100681,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 100683,
                  "src": "1968:14:196",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes_memory_ptr_$dyn_memory_ptr",
                    "typeString": "bytes[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 100679,
                      "name": "bytes",
                      "nodeType": "ElementaryTypeName",
                      "src": "1968:5:196",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_storage_ptr",
                        "typeString": "bytes"
                      }
                    },
                    "id": 100680,
                    "nodeType": "ArrayTypeName",
                    "src": "1968:7:196",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes_storage_$dyn_storage_ptr",
                      "typeString": "bytes[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1949:34:196"
            },
            "scope": 100721,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 100694,
            "nodeType": "FunctionDefinition",
            "src": "2331:155:196",
            "nodes": [],
            "documentation": {
              "id": 100684,
              "nodeType": "StructuredDocumentation",
              "src": "1988:340:196",
              "text": " @notice Determine the fee charged by the DON that will be split between signing Node Operators for servicing the request\n @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n @param billing The request's billing configuration\n @return fee Cost in Juels (1e18) of LINK"
            },
            "functionSelector": "f1e14a21",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "getRequiredFee",
            "nameLocation": "2340:14:196",
            "parameters": {
              "id": 100690,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 100686,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "2375:4:196",
                  "nodeType": "VariableDeclaration",
                  "scope": 100694,
                  "src": "2360:19:196",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 100685,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "2360:5:196",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 100689,
                  "mutability": "mutable",
                  "name": "billing",
                  "nameLocation": "2443:7:196",
                  "nodeType": "VariableDeclaration",
                  "scope": 100694,
                  "src": "2385:65:196",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_RequestBilling_$96245_calldata_ptr",
                    "typeString": "struct FunctionsBillingRegistryInterface.RequestBilling"
                  },
                  "typeName": {
                    "id": 100688,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 100687,
                      "name": "FunctionsBillingRegistryInterface.RequestBilling",
                      "nameLocations": [
                        "2385:33:196",
                        "2419:14:196"
                      ],
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 96245,
                      "src": "2385:48:196"
                    },
                    "referencedDeclaration": 96245,
                    "src": "2385:48:196",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_RequestBilling_$96245_storage_ptr",
                      "typeString": "struct FunctionsBillingRegistryInterface.RequestBilling"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2354:100:196"
            },
            "returnParameters": {
              "id": 100693,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 100692,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 100694,
                  "src": "2478:6:196",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 100691,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "2478:6:196",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2477:8:196"
            },
            "scope": 100721,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 100708,
            "nodeType": "FunctionDefinition",
            "src": "3037:152:196",
            "nodes": [],
            "documentation": {
              "id": 100695,
              "nodeType": "StructuredDocumentation",
              "src": "2490:544:196",
              "text": " @notice Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\n @param subscriptionId A unique subscription ID allocated by billing system,\n a client can make requests from different contracts referencing the same subscription\n @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n @param gasLimit Gas limit for the fulfillment callback\n @return billedCost Cost in Juels (1e18) of LINK"
            },
            "functionSelector": "d227d245",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "estimateCost",
            "nameLocation": "3046:12:196",
            "parameters": {
              "id": 100704,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 100697,
                  "mutability": "mutable",
                  "name": "subscriptionId",
                  "nameLocation": "3071:14:196",
                  "nodeType": "VariableDeclaration",
                  "scope": 100708,
                  "src": "3064:21:196",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 100696,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "3064:6:196",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 100699,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "3106:4:196",
                  "nodeType": "VariableDeclaration",
                  "scope": 100708,
                  "src": "3091:19:196",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 100698,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3091:5:196",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 100701,
                  "mutability": "mutable",
                  "name": "gasLimit",
                  "nameLocation": "3123:8:196",
                  "nodeType": "VariableDeclaration",
                  "scope": 100708,
                  "src": "3116:15:196",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 100700,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3116:6:196",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 100703,
                  "mutability": "mutable",
                  "name": "gasPrice",
                  "nameLocation": "3145:8:196",
                  "nodeType": "VariableDeclaration",
                  "scope": 100708,
                  "src": "3137:16:196",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 100702,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "3137:7:196",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3058:99:196"
            },
            "returnParameters": {
              "id": 100707,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 100706,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 100708,
                  "src": "3181:6:196",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint96",
                    "typeString": "uint96"
                  },
                  "typeName": {
                    "id": 100705,
                    "name": "uint96",
                    "nodeType": "ElementaryTypeName",
                    "src": "3181:6:196",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint96",
                      "typeString": "uint96"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3180:8:196"
            },
            "scope": 100721,
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "id": 100720,
            "nodeType": "FunctionDefinition",
            "src": "3689:109:196",
            "nodes": [],
            "documentation": {
              "id": 100709,
              "nodeType": "StructuredDocumentation",
              "src": "3193:493:196",
              "text": " @notice Sends a request (encoded as data) using the provided subscriptionId\n @param subscriptionId A unique subscription ID allocated by billing system,\n a client can make requests from different contracts referencing the same subscription\n @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\n @param gasLimit Gas limit for the fulfillment callback\n @return requestId A unique request identifier (unique per DON)"
            },
            "functionSelector": "28242b04",
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "sendRequest",
            "nameLocation": "3698:11:196",
            "parameters": {
              "id": 100716,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 100711,
                  "mutability": "mutable",
                  "name": "subscriptionId",
                  "nameLocation": "3717:14:196",
                  "nodeType": "VariableDeclaration",
                  "scope": 100720,
                  "src": "3710:21:196",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint64",
                    "typeString": "uint64"
                  },
                  "typeName": {
                    "id": 100710,
                    "name": "uint64",
                    "nodeType": "ElementaryTypeName",
                    "src": "3710:6:196",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint64",
                      "typeString": "uint64"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 100713,
                  "mutability": "mutable",
                  "name": "data",
                  "nameLocation": "3748:4:196",
                  "nodeType": "VariableDeclaration",
                  "scope": 100720,
                  "src": "3733:19:196",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_calldata_ptr",
                    "typeString": "bytes"
                  },
                  "typeName": {
                    "id": 100712,
                    "name": "bytes",
                    "nodeType": "ElementaryTypeName",
                    "src": "3733:5:196",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes_storage_ptr",
                      "typeString": "bytes"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 100715,
                  "mutability": "mutable",
                  "name": "gasLimit",
                  "nameLocation": "3761:8:196",
                  "nodeType": "VariableDeclaration",
                  "scope": 100720,
                  "src": "3754:15:196",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  },
                  "typeName": {
                    "id": 100714,
                    "name": "uint32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3754:6:196",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint32",
                      "typeString": "uint32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3709:61:196"
            },
            "returnParameters": {
              "id": 100719,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 100718,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 100720,
                  "src": "3789:7:196",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 100717,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "3789:7:196",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3788:9:196"
            },
            "scope": 100721,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "FunctionsOracleInterface",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 100635,
          "nodeType": "StructuredDocumentation",
          "src": "108:55:196",
          "text": " @title Chainlink Functions oracle interface."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          100721
        ],
        "name": "FunctionsOracleInterface",
        "nameLocation": "174:24:196",
        "scope": 100722,
        "usedErrors": [],
        "usedEvents": []
      }
    ],
    "license": "MIT"
  },
  "id": 196
}